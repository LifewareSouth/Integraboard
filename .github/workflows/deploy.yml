name: Development CI/CD
on:
  push:
    tags:
      - '*'

env:
  SOLUTION_DIR: './prototype'
  SOLUTION_PATH: './prototype/WpfApp1.sln'
  PROJECT_TO_BUILD_PATH: ./prototype/WpfApp1
  PROJECT_TO_BUILD_CSPROJ_PATH: WpfApp1.csproj
  CONFIGURATION: Debug
  RUNTIME_IDENTIFIER: win-x86
  TARGET_PLATFORM: Any CPU
  OUTPUT_PATH: './output'
  VERSION: '1.0.0'
  ASSEMBLY_VERSION: '1.0.0'

  CICD_PATH: './cicd'
  NUSPEC_FILE_PATH: './cicd/app.nuspec'
  SQUIRREL_VERSION: '1.5.1'
  SQUIRREL_ICON: './prototype/WpfApp1/logoBoard.ico' 
  SQUIRREL_OUTPUT_PATH: './cicd/output'
  APP_ID: 'IntegraBoard4'
  AUTHOR: 'Lifeware'
  # Para pruebas -> DESTINO_S3: 'debug'
  # Para producciÃ³n -> DESTINO_S3: 'release'
  # Para launcher -> DESTINO_S3: 'temporal'
  DESTINO_S3: 'debug'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      
      - name: Echo assembly
        run: echo ${{ env.ASSEMBLY_VERSION }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Add NuGet to PATH
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'

      - name: Restore solution nugget packages
        run: nuget restore $env:SOLUTION_PATH

      - name: Build WpfApp1.csproj (WPF app)
        run: msbuild ${{ env.SOLUTION_PATH }} /p:Platform=$env:TARGET_PLATFORM /p:Configuration=$env:CONFIGURATION /p:Version=${{env.ASSEMBLY_VERSION}} /p:InformationalVersion=${{env.ASSEMBLY_VERSION}}
      
      - name: Generate artifact (build folder)
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: ${{ env.PROJECT_TO_BUILD_PATH }}/bin/${{ env.CONFIGURATION }}

      - name: Generate artifact (squirrel exe)
        uses: actions/upload-artifact@v2
        with:
          name: squirrel-exe-artifact
          path: ${{ env.SOLUTION_DIR }}/packages/squirrel.windows.${{ env.SQUIRREL_VERSION }}/tools
  
  download:
    runs-on: ubuntu-latest
    steps:
    - name: check state
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{ secrets.AWS_REGION}}
    
   ## - name: set destino_s3
   ##   if : github.ref == 'refs/heads/produccion'
   ##   run: echo "DESTINO_S3=release" >> $GITHUB_ENV
    
    - name: download RELEASE from debug in s3
      run: aws s3 cp ${{ secrets.AWS_BUCKET}}/${{ env.DESTINO_S3 }}/RELEASES ${{ env.SQUIRREL_OUTPUT_PATH }} 
    
    - name: read RELEASES
      run: echo "OUPUT_RELEASE=$( cat ${{ env.SQUIRREL_OUTPUT_PATH }}/RELEASES | cut -d " " -f2 | tail -1 )" >> $GITHUB_ENV

    - name: dowload RELEASE from debug in s3
      run: aws s3 cp ${{ secrets.AWS_BUCKET}}/${{ env.DESTINO_S3 }}/${{ env.OUPUT_RELEASE }} ${{ env.SQUIRREL_OUTPUT_PATH }}

    - name: Echo file download
      run: cd ${{ env.SQUIRREL_OUTPUT_PATH }} && ls
    
    - name: Generate artifact ( files download)
      uses: actions/upload-artifact@v2
      with:
        name: files-s3-artifact
        path: ${{ env.SQUIRREL_OUTPUT_PATH }}

  package:
    runs-on: windows-latest
    needs: [ build, download ]
    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: ./cicd/build-artifact

      - name: Download squirrel exe artifact
        uses: actions/download-artifact@v2
        with:
          name: squirrel-exe-artifact
          path: ./cicd/squirrel-exe-artifact

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: files-s3-artifact
          path: ${{ env.SQUIRREL_OUTPUT_PATH }}

      - name: Delete build artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            build-artifact
            squirrel-exe-artifact
            files-s3-artifact
      - name: Echo folder debug
        run: ls && cd ./cicd && ls && cd ./build-artifact && ls && cd .. && cd ./squirrel-exe-artifact && ls
      
      - name: Echo assembly
        run: echo ${{ env.ASSEMBLY_VERSION }}


      - name: Echo folder output
        run:  cd ${{ env.SQUIRREL_OUTPUT_PATH }} && ls

      - name: Create nuget package
        run: nuget pack ${{ env.NUSPEC_FILE_PATH }} -Properties "AppId=${{ env.APP_ID }};Configuration=${{ env.CONFIGURATION }};Version=${{env.ASSEMBLY_VERSION}};Author=${{ env.author }}" -Version ${{env.ASSEMBLY_VERSION}} -OutputDirectory ${{ env.CICD_PATH }}

      - name: Create squirrel release
        run: \& ${{ env.CICD_PATH }}/squirrel-exe-artifact/squirrel.exe --releasify ${{ env.CICD_PATH }}/${{ env.APP_ID }}.${{env.ASSEMBLY_VERSION}}.nupkg --icon ${{ env.SQUIRREL_ICON }} --releaseDir ${{ env.SQUIRREL_OUTPUT_PATH }} -g .\loading-bar.gif  | Write-Output

      - name: check output and change name setup.exe
        run:  cd ${{ env.SQUIRREL_OUTPUT_PATH }} && ls && mv Setup.exe WpfApp1.exe

      - name: Generate artifact (squirrel final exe)
        uses: actions/upload-artifact@v2
        with:
          name: squirrel-final-artifact
          path: ${{ env.SQUIRREL_OUTPUT_PATH }}

  release:
    runs-on: ubuntu-latest
    needs: [ package ]
    steps:
    - name: Check state
      uses: actions/checkout@v2

    - name: Download squirrel final artifact
      uses: actions/download-artifact@v2
      with:
        name: squirrel-final-artifact
        path: ${{ env.SQUIRREL_OUTPUT_PATH }}
    
    - name: Delete squirrel final artifact
      uses: geekyeggo/delete-artifact@v1
      with:
        name: |
          squirrel-final-artifact
          
    - name: Echo folder output
      run:  cd ${{ env.SQUIRREL_OUTPUT_PATH }} && ls
    
    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{ secrets.AWS_REGION}}
      
    - name: Echo assembly
      run: echo ${{ env.ASSEMBLY_VERSION }}

  ##    if : github.ref == 'refs/heads/produccion'
  ##    run: echo "DESTINO_S3=release" >> $GITHUB_ENV
    
    - name: Upload squirrel
      run: |
        aws s3 cp ${{ env.SQUIRREL_OUTPUT_PATH }}/${{ env.APP_ID }}-${{env.ASSEMBLY_VERSION}}-full.nupkg ${{ secrets.AWS_BUCKET}}/${{ env.DESTINO_S3 }}/ --acl public-read
        aws s3 cp ${{ env.SQUIRREL_OUTPUT_PATH }}/RELEASES ${{ secrets.AWS_BUCKET}}/${{ env.DESTINO_S3 }}/ --acl public-read
        aws s3 cp ${{ env.SQUIRREL_OUTPUT_PATH }}/IntegraBoard4Installer.exe ${{ secrets.AWS_BUCKET}}/${{ env.DESTINO_S3 }}/ --acl public-read
        aws s3 cp ${{ env.SQUIRREL_OUTPUT_PATH }}/${{ env.APP_ID }}-${{env.ASSEMBLY_VERSION}}-delta.nupkg ${{ secrets.AWS_BUCKET}}/${{ env.DESTINO_S3 }}/ --acl public-read
     
